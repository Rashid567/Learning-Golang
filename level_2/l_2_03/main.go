/*
Что выведет программа?

Объяснить внутреннее устройство интерфейсов и их отличие от пустых интерфейсов.
*/
package main

import (
	"fmt"
	"os"
)

func Foo() error {
	var err *os.PathError = nil
	return err

}

func main() {
	err := Foo()
	fmt.Println(err)
	fmt.Println(err == nil)
}

/*
ОТВЕТ

Вывод программы:
```
<nil>
false
```

Строение интерфейсов:
Не пустой интерфейс состоит из двух частей:
- itab - Interface Table - Содержит информацию о типе, методах и прочие данные.
  С помощью этой информации Go понимает какие методы доступны и как их вызывать у значения
- data - unsafe.Pointer - указатель на конкретное значение, которое реализует интерфейс

Структура itab:
- inter *interfacetype - Тип интерфейса. В данном случае `error`
- _type *_type         - Информация о конкретном типе, который реализует интерфейс. В данном случае `*os.PathError`
- hash  uint32         - Хеш типа для оптимизаций
- _     [4]byte        -
- fun   [1]uintptr     - Массив целочисленных указателей на методы конкретного типа, которые реализуют интерфейс


Отличие от пустых интерфейсов:
Пустой интерфейс не содержит методов, поэтому у него и структура упрощенная. Она содержит:
- _type *_type          - Информация о конкретном типе, который реализует интерфейс
- data - unsafe.Pointer - указатель на конкретное значение, которое реализует интерфейс


Объяснение вывода:
Строка 14
Создаём указатель на `os.PathError` со значение nil

Строка 15
Возвращаем указатель обернув его интерфейсом `error`
Тут заполняется itab, а data остаётся nil

Строка 21
Println распечатывает значение (data) - тут он равен nil

Строка 22
Сравнение проверяет не только значение но и тип (itab._type), а он не пустой. Поэтому вывод `false`

*/
