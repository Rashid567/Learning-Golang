/*
Что выведет программа?

Объяснить порядок выполнения defer функций и итоговый вывод.
*/
package main

import "fmt"

func test() (x int) {
  defer func() {
    x++
  }()
  x = 1
  return
}

func anotherTest() int {
  var x int
  defer func() {
    x++
  }()
  x = 1
  return x
}

func main() {
  fmt.Println(test())
  fmt.Println(anotherTest())
}



/*
ОТВЕТ

Программа выведет:
```
2
1
```

Почему так:
1. Defer функции выполняются в обратном регистрации порядке. И всегда в конце функции

2. В обоих функциях defer-функции работают с переменными, которые не переданы как аргументы, 
   а объявлены в родительской функции. Поэтому не важно переменные объявлены до или после регистрации defer функций. 
   Defer функции всегда будут выполнять операцию x = 1 + 1 

3. Причина отличия вывода в способе return:
   - В функции test - это возврат с помощью именованных параметров, на которые могут повлиять defer функции
   - В функции anotherTest - это обычные возвращаемые параметры. 
     Они копируются в строке с return и как следствие не изменяются при работе defer функций

P.s. 
А вот на структуры на подобии слайсов и мап они могут повлиять одинаково, 
при условии что они не будут пересозданы в процессе модификации 
*/
