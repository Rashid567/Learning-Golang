/*
–†–∞–∑–≤–æ—Ä–æ—Ç —Å–ª–æ–≤ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ.

–ü—Ä–∏–º–µ—Ä:
–≤—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: ¬´snow dog sun¬ª
–≤—ã—Ö–æ–¥: ¬´sun dog snow¬ª.

–°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ —Å–ª–æ–≤–∞ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –æ–¥–∏–Ω–æ—á–Ω—ã–º –ø—Ä–æ–±–µ–ª–æ–º. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ä–µ–∑—ã,
–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é ¬´–Ω–∞ –º–µ—Å—Ç–µ¬ª.
*/

package main

import (
	"fmt"
	"slices"
)

func ReverseSentence(value string) string {
	runes := []rune(value)
	slices.Reverse(runes)

	for start := 0; start < len(runes); {
		// –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Å–ª–æ–≤–∞ - –ø–µ—Ä–≤—ã–π –Ω–µ –ø—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª
		if runes[start] == ' ' {
			start++
			continue
		}

		// –ò—â–µ–º –∫–æ–Ω–µ—Ü —Å–ª–æ–≤–∞ - –ø–µ—Ä–≤—ã–π –ø—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª
		end := start
		for i := end; i < len(runes); i++ {
			if runes[i] == ' ' {
				end = i - 1
				break
			}
		}

		// –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ª–æ–≤–æ
		for i, j := start, end; i < j; i, j = i+1, j-1 {
			runes[i], runes[j] = runes[j], runes[i]
		}

		// –°–¥–≤–∏–≥–∞–µ–º start
		start = end + 1

	}

	return string(runes)

}

func main() {

	sentences := []string{
		"snow dog sun",
		"",
		"  2",
		"    snow   dog   sun  ",
		"    snow   dog   sun  üëç  üëãüòä ",
	}

	for _, sentence := range sentences {
		reversed := ReverseSentence(sentence)
		fmt.Printf("Original (%d): '%s'\n", len(sentence), sentence)
		fmt.Printf("Reversed (%d): '%s'\n", len(reversed), reversed)
		fmt.Println()
	}

}
